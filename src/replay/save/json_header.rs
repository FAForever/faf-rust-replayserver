use std::collections::HashMap;

use crate::{
    database::queries::GameTeams,
    database::queries::{ModVersions, Queries},
    error::SaveError,
};

// Saved replay's json header. Some fields are weird / redundant, that's legacy. TODO: new format.
#[derive(serde::Serialize)]
pub struct ReplayJsonHeader {
    complete: bool,
    featured_mod: Option<String>,
    featured_mod_versions: ModVersions,
    game_end: i64,
    game_type: String,
    host: String,
    launched_at: i64,
    mapname: String,
    num_players: i64,
    recorder: String, // Same as host. This used to only be in local replays. I accidentally added it server-side. Not harmful.
    state: String,
    teams: HashMap<String, Vec<String>>,
    title: String,
    uid: u64,
    compression: String,
    version: i64,
}

impl ReplayJsonHeader {
    fn fixup_team_dict(mut d: GameTeams) -> HashMap<String, Vec<String>> {
        // Json headers stores team number as string. Some legacy reason.
        let mut out = HashMap::new();
        for (k, v) in d.drain() {
            out.insert(k.to_string(), v);
        }
        out
    }

    pub async fn from_id_and_db(db: &Queries, uid: u64) -> Result<ReplayJsonHeader, SaveError> {
        let game_stats = db.get_game_stats(uid).await?;
        let teams = Self::fixup_team_dict(db.get_teams_in_game(uid).await?);
        let featured_mod_versions = match &game_stats.featured_mod {
            None => HashMap::new(),
            Some(v) => db.get_mod_versions(v).await?,
        };

        Ok(Self {
            complete: true,
            featured_mod: game_stats.featured_mod,
            featured_mod_versions,
            game_end: game_stats.game_end,
            game_type: game_stats.game_type,
            host: game_stats.host.clone(),
            launched_at: game_stats.launched_at,
            mapname: game_stats.mapname,
            num_players: game_stats.num_players,
            recorder: game_stats.host,
            state: "PLAYING".into(),
            teams,
            title: game_stats.title,
            uid,
            compression: "zstd".into(),
            version: 2,
        })
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn serialized_header_looks_as_expected() {
        // This was generated BY this test, but was also compared by hand to an existing header. It looks like it should.
        let expected = r#"{"complete":true,"featured_mod":"faf","featured_mod_versions":{"faf":3718},"game_end":10000,"game_type":"unknown","host":"Sheeo","launched_at":9000,"mapname":"adaptive_syrtis_major.v0001","num_players":10,"recorder":"MazorNoob","state":"PLAYING","teams":{"1":["Mephi","Sheeo","MazorNoob","Downlord"]},"title":"100k+","uid":9999999,"compression":"zstd","version":2}"#;
        /* A bit paranoid, but let's make sure. */
        let mut mod_versions = HashMap::new();
        mod_versions.insert("faf".into(), 3718);
        let mut teams = HashMap::new();
        // Only one since order is nondeterministic.
        teams.insert(
            "1".into(),
            vec![
                String::from("Mephi"),
                "Sheeo".into(),
                "MazorNoob".into(),
                "Downlord".into(),
            ],
        );
        let header = ReplayJsonHeader {
            complete: true,
            featured_mod: Some("faf".into()),
            featured_mod_versions: mod_versions,
            game_end: 10000,
            game_type: "unknown".into(),
            host: "Sheeo".into(),
            launched_at: 9000,
            mapname: "adaptive_syrtis_major.v0001".into(),
            num_players: 10,
            recorder: "MazorNoob".into(),
            state: "PLAYING".into(),
            teams,
            title: "100k+".into(),
            uid: 9999999,
            compression: "zstd".into(),
            version: 2,
        };
        assert_eq!(serde_json::to_string(&header).unwrap(), expected);
    }
}
